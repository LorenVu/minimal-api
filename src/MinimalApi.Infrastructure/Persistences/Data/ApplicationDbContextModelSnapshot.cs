// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimalProject.Infrastructure.Persistences;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MinimalApi.Infrastructure.Persistences.Data
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MinimalApi.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Addresses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.HasIndex("WardId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("integer");

                    b.Property<long>("PartnerId1")
                        .HasColumnType("bigint");

                    b.Property<string>("PhysicalFileUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("nonAccentCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId1");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveFLG")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveFLG")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.IdentityCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateOfExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ethnic")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherFullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentitfyingCharacteristics")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherFullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OldIdentityDocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OldIdentityDocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpouseFullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TemporaryAddress")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("VisaNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<short>("VisaType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("IdentityCustomers");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Partner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BankId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RepresentativeName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveFLG")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserPass")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmailAddress" }, "IX_Email_Descending")
                        .IsDescending();

                    b.HasIndex(new[] { "FullName" }, "IX_FullName_Descending")
                        .IsDescending();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveFLG")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("character(25)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedUser")
                        .HasColumnType("character(25)");

                    b.Property<DateTime>("LastModifiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("MinimalApi.Domain.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Domain.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Domain.Entities.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Domain.Entities.Ward", "Ward")
                        .WithMany("Addresses")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Contract", b =>
                {
                    b.HasOne("MinimalApi.Domain.Entities.Partner", "Partner")
                        .WithMany("Contract")
                        .HasForeignKey("PartnerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Domain.Entities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.District", b =>
                {
                    b.HasOne("MinimalApi.Domain.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.IdentityCustomer", b =>
                {
                    b.HasOne("MinimalApi.Domain.Entities.User", "Customer")
                        .WithMany("IdentityCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Partner", b =>
                {
                    b.HasOne("MinimalApi.Domain.Entities.Bank", "Bank")
                        .WithMany("Partners")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Domain.Entities.User", "User")
                        .WithMany("Partners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Province", b =>
                {
                    b.HasOne("MinimalApi.Domain.Entities.Country", "Country")
                        .WithMany("Province")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Ward", b =>
                {
                    b.HasOne("MinimalApi.Domain.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Bank", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.District", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Partner", b =>
                {
                    b.Navigation("Contract");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Province", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contracts");

                    b.Navigation("IdentityCustomer");

                    b.Navigation("Partners");
                });

            modelBuilder.Entity("MinimalApi.Domain.Entities.Ward", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
